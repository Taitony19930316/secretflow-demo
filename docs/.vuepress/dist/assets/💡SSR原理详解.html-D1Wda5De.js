import{_ as s,c as a,a as e,o as p}from"./app-rbwDE6nc.js";const t={};function l(i,n){return p(),a("div",null,[...n[0]||(n[0]=[e(`<h1 id="💡-为什么环境检查能解决-ssr-报错" tabindex="-1"><a class="header-anchor" href="#💡-为什么环境检查能解决-ssr-报错"><span>💡 为什么环境检查能解决 SSR 报错？</span></a></h1><hr><h2 id="🤔-问题回顾" tabindex="-1"><a class="header-anchor" href="#🤔-问题回顾"><span>🤔 问题回顾</span></a></h2><h3 id="报错信息" tabindex="-1"><a class="header-anchor" href="#报错信息"><span>报错信息</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">ReferenceError: window is not defined</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 代码</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>为什么加一个判断就行了？</strong></p><hr><h2 id="📚-核心概念" tabindex="-1"><a class="header-anchor" href="#📚-核心概念"><span>📚 核心概念</span></a></h2><h3 id="_1-什么是-ssr-服务端渲染" tabindex="-1"><a class="header-anchor" href="#_1-什么是-ssr-服务端渲染"><span>1. 什么是 SSR（服务端渲染）？</span></a></h3><p>SSR = Server-Side Rendering（服务端渲染）</p><h4 id="传统的客户端渲染-csr" tabindex="-1"><a class="header-anchor" href="#传统的客户端渲染-csr"><span>传统的客户端渲染（CSR）</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">浏览器请求</span>
<span class="line">    ↓</span>
<span class="line">服务器返回空白 HTML + JavaScript</span>
<span class="line">    ↓</span>
<span class="line">浏览器下载 JavaScript</span>
<span class="line">    ↓</span>
<span class="line">JavaScript 执行，动态生成内容</span>
<span class="line">    ↓</span>
<span class="line">用户看到页面（慢）</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>缺点</strong>：</p><ul><li>首屏加载慢</li><li>SEO 不友好（搜索引擎看不到内容）</li><li>白屏时间长</li></ul><h4 id="服务端渲染-ssr" tabindex="-1"><a class="header-anchor" href="#服务端渲染-ssr"><span>服务端渲染（SSR）</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">浏览器请求</span>
<span class="line">    ↓</span>
<span class="line">服务器用 Node.js 执行代码，生成完整 HTML</span>
<span class="line">    ↓</span>
<span class="line">服务器返回完整 HTML</span>
<span class="line">    ↓</span>
<span class="line">用户立即看到内容（快）</span>
<span class="line">    ↓</span>
<span class="line">浏览器下载 JavaScript，激活交互</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>优点</strong>：</p><ul><li>首屏加载快</li><li>SEO 友好</li><li>无白屏</li></ul><hr><h2 id="🏗️-vuepress-的构建过程" tabindex="-1"><a class="header-anchor" href="#🏗️-vuepress-的构建过程"><span>🏗️ VuePress 的构建过程</span></a></h2><h3 id="vuepress-2-x-构建流程" tabindex="-1"><a class="header-anchor" href="#vuepress-2-x-构建流程"><span>VuePress 2.x 构建流程</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">1. 读取 Markdown 文件</span>
<span class="line">   ↓</span>
<span class="line">2. 转换为 Vue 组件</span>
<span class="line">   ↓</span>
<span class="line">3. 【SSR 阶段】在 Node.js 中执行，生成 HTML</span>
<span class="line">   ↓</span>
<span class="line">4. 输出静态 HTML 文件</span>
<span class="line">   ↓</span>
<span class="line">5. 部署到服务器</span>
<span class="line">   ↓</span>
<span class="line">6. 【CSR 阶段】用户访问时，浏览器激活交互</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关键点-两个不同的环境" tabindex="-1"><a class="header-anchor" href="#关键点-两个不同的环境"><span>关键点：两个不同的环境</span></a></h3><table><thead><tr><th>环境</th><th>阶段</th><th>运行在</th><th>有 window 吗？</th><th>有 document 吗？</th></tr></thead><tbody><tr><td><strong>Node.js</strong></td><td>构建时（SSR）</td><td>服务器</td><td>❌ 没有</td><td>❌ 没有</td></tr><tr><td><strong>浏览器</strong></td><td>运行时（CSR）</td><td>客户端</td><td>✅ 有</td><td>✅ 有</td></tr></tbody></table><hr><h2 id="⚠️-为什么会报错" tabindex="-1"><a class="header-anchor" href="#⚠️-为什么会报错"><span>⚠️ 为什么会报错？</span></a></h2><h3 id="问题代码" tabindex="-1"><a class="header-anchor" href="#问题代码"><span>问题代码</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line">window<span class="token punctuation">.</span><span class="token function-variable function">runPSI</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="执行过程" tabindex="-1"><a class="header-anchor" href="#执行过程"><span>执行过程</span></a></h3><h4 id="第1步-构建时-node-js-环境" tabindex="-1"><a class="header-anchor" href="#第1步-构建时-node-js-环境"><span>第1步：构建时（Node.js 环境）</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// VuePress 在 Node.js 中执行这段代码</span></span>
<span class="line">window<span class="token punctuation">.</span><span class="token function-variable function">runPSI</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line">        ↑</span>
<span class="line">      这里报错！</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>为什么报错</strong>：</p><ul><li>Node.js 是服务器端 JavaScript 运行环境</li><li>Node.js <strong>没有</strong> <code>window</code> 对象</li><li>Node.js 只有 <code>global</code> 对象</li></ul><p><strong>类比</strong>：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">就像在 Python 中调用 JavaScript 的函数</span>
<span class="line">→ Python 说：&quot;我不认识 window 这个东西！&quot;</span>
<span class="line">→ ReferenceError: window is not defined</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="第2步-运行时-浏览器环境" tabindex="-1"><a class="header-anchor" href="#第2步-运行时-浏览器环境"><span>第2步：运行时（浏览器环境）</span></a></h4><p>如果代码能通过构建，到浏览器就正常了：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 浏览器中执行</span></span>
<span class="line">window<span class="token punctuation">.</span><span class="token function-variable function">runPSI</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line">        ↑</span>
<span class="line">      浏览器有 window，正常</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="✅-为什么检查能解决问题" tabindex="-1"><a class="header-anchor" href="#✅-为什么检查能解决问题"><span>✅ 为什么检查能解决问题？</span></a></h2><h3 id="解决方案代码" tabindex="-1"><a class="header-anchor" href="#解决方案代码"><span>解决方案代码</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  window<span class="token punctuation">.</span><span class="token function-variable function">runPSI</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="执行过程详解" tabindex="-1"><a class="header-anchor" href="#执行过程详解"><span>执行过程详解</span></a></h3><h4 id="构建时-node-js-环境" tabindex="-1"><a class="header-anchor" href="#构建时-node-js-环境"><span>构建时（Node.js 环境）</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 第1步：检查 window 是否存在</span></span>
<span class="line"><span class="token keyword">typeof</span> window</span>
<span class="line"><span class="token comment">// 在 Node.js 中，window 未定义</span></span>
<span class="line"><span class="token comment">// typeof 对未定义的变量不会报错，返回 &#39;undefined&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 第2步：判断</span></span>
<span class="line"><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span>  <span class="token comment">// &#39;undefined&#39; !== &#39;undefined&#39;</span></span>
<span class="line">                                <span class="token comment">// false</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 第3步：不执行 if 块内的代码</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 这里的代码不会执行，跳过！</span></span>
<span class="line">  window<span class="token punctuation">.</span><span class="token function-variable function">runPSI</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>  <span class="token comment">// 不执行，不报错</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>关键</strong>：<code>typeof</code> 是安全的运算符，对未定义的变量也不会报错。</p><h4 id="运行时-浏览器环境" tabindex="-1"><a class="header-anchor" href="#运行时-浏览器环境"><span>运行时（浏览器环境）</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 第1步：检查 window 是否存在</span></span>
<span class="line"><span class="token keyword">typeof</span> window</span>
<span class="line"><span class="token comment">// 在浏览器中，window 存在</span></span>
<span class="line"><span class="token comment">// 返回 &#39;object&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 第2步：判断</span></span>
<span class="line"><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span>  <span class="token comment">// &#39;object&#39; !== &#39;undefined&#39;</span></span>
<span class="line">                                <span class="token comment">// true</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 第3步：执行 if 块内的代码</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 浏览器中执行这里的代码</span></span>
<span class="line">  window<span class="token punctuation">.</span><span class="token function-variable function">runPSI</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>  <span class="token comment">// 正常挂载</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🔬-深入理解-typeof-的特殊性" tabindex="-1"><a class="header-anchor" href="#🔬-深入理解-typeof-的特殊性"><span>🔬 深入理解：typeof 的特殊性</span></a></h2><h3 id="为什么用-typeof" tabindex="-1"><a class="header-anchor" href="#为什么用-typeof"><span>为什么用 typeof？</span></a></h3><h4 id="❌-错误的检查方式" tabindex="-1"><a class="header-anchor" href="#❌-错误的检查方式"><span>❌ 错误的检查方式</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 错误 1：直接检查</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>window <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 构建时这里就会报错！</span></span>
<span class="line">  <span class="token comment">// ReferenceError: window is not defined</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 错误 2：检查是否存在</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 同样报错</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>为什么错误</strong>：</p><ul><li>在判断 <code>window !== undefined</code> 之前</li><li>JavaScript 需要先<strong>访问</strong> <code>window</code> 变量</li><li>但 Node.js 中 <code>window</code> 根本不存在</li><li>访问时就报错了</li></ul><h4 id="✅-正确的检查方式" tabindex="-1"><a class="header-anchor" href="#✅-正确的检查方式"><span>✅ 正确的检查方式</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 正确</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>为什么正确</strong>：</p><ul><li><code>typeof</code> 是 JavaScript 的<strong>运算符</strong>，不是函数</li><li><code>typeof</code> 对<strong>未定义的变量</strong>也能正常工作</li><li>不会抛出 ReferenceError</li></ul><h3 id="typeof-的特殊行为" tabindex="-1"><a class="header-anchor" href="#typeof-的特殊行为"><span>typeof 的特殊行为</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 未定义的变量</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>notExist<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// ❌ ReferenceError</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> notExist<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ✅ &#39;undefined&#39;（不报错）</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 这是 typeof 的特殊设计</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🌍-两个世界的隔离" tabindex="-1"><a class="header-anchor" href="#🌍-两个世界的隔离"><span>🌍 两个世界的隔离</span></a></h2><h3 id="node-js-世界-服务器端" tabindex="-1"><a class="header-anchor" href="#node-js-世界-服务器端"><span>Node.js 世界（服务器端）</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Node.js 的全局对象</span></span>
<span class="line">global<span class="token punctuation">.</span>myVar <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 没有浏览器 API</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// &#39;undefined&#39;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> document<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// &#39;undefined&#39;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> localStorage<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;undefined&#39;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> crypto<span class="token punctuation">.</span>subtle<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可能报错</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 但有 Node.js API</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> require<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// &#39;function&#39;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> process<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// &#39;object&#39;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> __dirname<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// &#39;string&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="浏览器世界-客户端" tabindex="-1"><a class="header-anchor" href="#浏览器世界-客户端"><span>浏览器世界（客户端）</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 浏览器的全局对象</span></span>
<span class="line">window<span class="token punctuation">.</span>myVar <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 有浏览器 API</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// &#39;object&#39;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> document<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// &#39;object&#39;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> localStorage<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> crypto<span class="token punctuation">.</span>subtle<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;object&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 但没有 Node.js API</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> require<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// &#39;undefined&#39;（浏览器中）</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> process<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// &#39;undefined&#39;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> __dirname<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// &#39;undefined&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🎯-实际应用-同构代码" tabindex="-1"><a class="header-anchor" href="#🎯-实际应用-同构代码"><span>🎯 实际应用：同构代码</span></a></h2><h3 id="什么是同构代码" tabindex="-1"><a class="header-anchor" href="#什么是同构代码"><span>什么是同构代码？</span></a></h3><p><strong>同构（Isomorphic）代码</strong>：能在服务器端和客户端都运行的代码。</p><h3 id="编写同构代码的原则" tabindex="-1"><a class="header-anchor" href="#编写同构代码的原则"><span>编写同构代码的原则</span></a></h3><h4 id="_1-环境检查" tabindex="-1"><a class="header-anchor" href="#_1-环境检查"><span>1. 环境检查</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 检查是否在浏览器环境</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 浏览器端代码</span></span>
<span class="line">  window<span class="token punctuation">.</span><span class="token function-variable function">myFunction</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 检查是否在 Node.js 环境</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> process <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Node.js 端代码</span></span>
<span class="line">  <span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-条件导入" tabindex="-1"><a class="header-anchor" href="#_2-条件导入"><span>2. 条件导入</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">let</span> storage<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  storage <span class="token operator">=</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 服务器端使用文件存储</span></span>
<span class="line">  storage <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">getItem</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* 读文件 */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">setItem</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* 写文件 */</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-生命周期钩子" tabindex="-1"><a class="header-anchor" href="#_3-生命周期钩子"><span>3. 生命周期钩子</span></a></h4><p>在 Vue/React 等框架中：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Vue</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 这个钩子只在浏览器端执行</span></span>
<span class="line">    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;scroll&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onScroll<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// React</span></span>
<span class="line"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 这个 effect 只在浏览器端执行</span></span>
<span class="line">  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;scroll&#39;</span><span class="token punctuation">,</span> onScroll<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="📊-对比总结" tabindex="-1"><a class="header-anchor" href="#📊-对比总结"><span>📊 对比总结</span></a></h2><h3 id="问题-vs-解决" tabindex="-1"><a class="header-anchor" href="#问题-vs-解决"><span>问题 vs 解决</span></a></h3><table><thead><tr><th>方面</th><th>问题代码</th><th>解决方案</th></tr></thead><tbody><tr><td><strong>代码</strong></td><td><code>window.runPSI = ...</code></td><td><code>if (typeof window !== &#39;undefined&#39;) { window.runPSI = ... }</code></td></tr><tr><td><strong>构建时</strong></td><td>❌ 报错：window is not defined</td><td>✅ 跳过，不执行</td></tr><tr><td><strong>运行时</strong></td><td>-</td><td>✅ 正常执行</td></tr><tr><td><strong>原理</strong></td><td>直接访问 window</td><td>先检查，再访问</td></tr></tbody></table><hr><h2 id="🔍-类比理解" tabindex="-1"><a class="header-anchor" href="#🔍-类比理解"><span>🔍 类比理解</span></a></h2><h3 id="类比1-检查门是否存在" tabindex="-1"><a class="header-anchor" href="#类比1-检查门是否存在"><span>类比1：检查门是否存在</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 错误的方式</span></span>
<span class="line"><span class="token function">打开门</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 如果门不存在，直接撞墙报错</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 正确的方式</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>门存在<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">打开门</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 只有门存在才尝试打开</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类比2-检查工具是否可用" tabindex="-1"><a class="header-anchor" href="#类比2-检查工具是否可用"><span>类比2：检查工具是否可用</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 在厨房</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>有搅拌机<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">使用搅拌机</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 在户外</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>有搅拌机<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 户外没有搅拌机，这段代码不执行</span></span>
<span class="line">  <span class="token function">使用搅拌机</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="💡-扩展知识" tabindex="-1"><a class="header-anchor" href="#💡-扩展知识"><span>💡 扩展知识</span></a></h2><h3 id="_1-其他需要检查的全局对象" tabindex="-1"><a class="header-anchor" href="#_1-其他需要检查的全局对象"><span>1. 其他需要检查的全局对象</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 检查 document</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> document <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 检查 localStorage</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> localStorage <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 检查 navigator</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> navigator <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-检查是否在-node-js-环境" tabindex="-1"><a class="header-anchor" href="#_2-检查是否在-node-js-环境"><span>2. 检查是否在 Node.js 环境</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 方法1：检查 process</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> process <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">&amp;&amp;</span> process<span class="token punctuation">.</span>versions <span class="token operator">&amp;&amp;</span> process<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;在 Node.js 环境&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 方法2：检查 window</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;不在浏览器环境，可能在 Node.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-更精确的环境检测" tabindex="-1"><a class="header-anchor" href="#_3-更精确的环境检测"><span>3. 更精确的环境检测</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">isBrowser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> document <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">isNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">typeof</span> process <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">&amp;&amp;</span> </span>
<span class="line">         process<span class="token punctuation">.</span>versions <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> </span>
<span class="line">         process<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>node <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBrowser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;在浏览器中&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;在 Node.js 中&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🎓-技术术语" tabindex="-1"><a class="header-anchor" href="#🎓-技术术语"><span>🎓 技术术语</span></a></h2><h3 id="ssr-vs-csr-vs-ssg" tabindex="-1"><a class="header-anchor" href="#ssr-vs-csr-vs-ssg"><span>SSR vs CSR vs SSG</span></a></h3><table><thead><tr><th>类型</th><th>全称</th><th>渲染时机</th><th>特点</th></tr></thead><tbody><tr><td><strong>SSR</strong></td><td>Server-Side Rendering</td><td>每次请求时</td><td>动态生成，SEO 好</td></tr><tr><td><strong>CSR</strong></td><td>Client-Side Rendering</td><td>浏览器端</td><td>单页应用，交互好</td></tr><tr><td><strong>SSG</strong></td><td>Static Site Generation</td><td>构建时</td><td>预渲染，速度快</td></tr></tbody></table><p>VuePress 使用的是 <strong>SSG</strong>（静态站点生成）：</p><ul><li>构建时用 SSR 生成 HTML</li><li>运行时用 CSR 激活交互</li></ul><hr><h2 id="✅-最佳实践" tabindex="-1"><a class="header-anchor" href="#✅-最佳实践"><span>✅ 最佳实践</span></a></h2><h3 id="在-vuepress-中使用-javascript-的模板" tabindex="-1"><a class="header-anchor" href="#在-vuepress-中使用-javascript-的模板"><span>在 VuePress 中使用 JavaScript 的模板</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ====================================</span></span>
<span class="line">  <span class="token comment">// 所有需要浏览器 API 的代码都放这里</span></span>
<span class="line">  <span class="token comment">// ====================================</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// 全局函数</span></span>
<span class="line">  window<span class="token punctuation">.</span><span class="token function-variable function">myFunction</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 使用 DOM API</span></span>
<span class="line">    <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 使用 Web API</span></span>
<span class="line">    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 使用浏览器 crypto</span></span>
<span class="line">    crypto<span class="token punctuation">.</span>subtle<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">&#39;SHA-256&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// 事件监听</span></span>
<span class="line">  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 初始化代码</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// 定时器</span></span>
<span class="line">  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 延迟执行的代码</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🎯-总结" tabindex="-1"><a class="header-anchor" href="#🎯-总结"><span>🎯 总结</span></a></h2><h3 id="核心原理" tabindex="-1"><a class="header-anchor" href="#核心原理"><span>核心原理</span></a></h3><ol><li><strong>VuePress 在构建时使用 Node.js 执行代码</strong></li><li><strong>Node.js 没有 <code>window</code>、<code>document</code> 等浏览器对象</strong></li><li><strong><code>typeof</code> 可以安全检查未定义的变量</strong></li><li><strong>环境检查让代码&quot;聪明地&quot;跳过不兼容的部分</strong></li></ol><h3 id="工作流程" tabindex="-1"><a class="header-anchor" href="#工作流程"><span>工作流程</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">构建时（Node.js）</span>
<span class="line">  ↓</span>
<span class="line">检查：typeof window !== &#39;undefined&#39;</span>
<span class="line">  ↓</span>
<span class="line">结果：false（window 不存在）</span>
<span class="line">  ↓</span>
<span class="line">跳过 if 块内的代码</span>
<span class="line">  ↓</span>
<span class="line">构建成功，生成 HTML</span>
<span class="line">  ↓</span>
<span class="line">部署到服务器</span>
<span class="line">  ↓</span>
<span class="line">用户访问（浏览器）</span>
<span class="line">  ↓</span>
<span class="line">检查：typeof window !== &#39;undefined&#39;</span>
<span class="line">  ↓</span>
<span class="line">结果：true（window 存在）</span>
<span class="line">  ↓</span>
<span class="line">执行 if 块内的代码</span>
<span class="line">  ↓</span>
<span class="line">功能正常工作</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="一句话总结" tabindex="-1"><a class="header-anchor" href="#一句话总结"><span>一句话总结</span></a></h3><p><strong>通过 <code>typeof window !== &#39;undefined&#39;</code> 检查，让代码在 Node.js 环境（构建时）跳过执行，在浏览器环境（运行时）正常执行，从而避免 SSR 报错。</strong></p><hr><h2 id="🤓-彩蛋-这不是-环境变量" tabindex="-1"><a class="header-anchor" href="#🤓-彩蛋-这不是-环境变量"><span>🤓 彩蛋：这不是&quot;环境变量&quot;</span></a></h2><h3 id="严格来说" tabindex="-1"><a class="header-anchor" href="#严格来说"><span>严格来说</span></a></h3><ul><li><strong>环境变量（Environment Variable）</strong>：系统级的配置变量，如 <code>process.env.NODE_ENV</code></li><li><strong>环境检查（Environment Check）</strong>：运行时判断当前在什么环境</li></ul><p>我们用的是<strong>环境检查</strong>，不是设置环境变量。</p><h3 id="真正的环境变量" tabindex="-1"><a class="header-anchor" href="#真正的环境变量"><span>真正的环境变量</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 读取环境变量（Node.js）</span></span>
<span class="line"><span class="token keyword">const</span> mode <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;生产环境&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;开发环境&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="我们用的环境检查" tabindex="-1"><a class="header-anchor" href="#我们用的环境检查"><span>我们用的环境检查</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 检查运行环境</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;浏览器环境&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Node.js 环境&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>希望这个详细的解释能帮你理解！🎉</p><p><strong>核心要点</strong>：</p><ul><li>VuePress 构建时在 Node.js 中运行代码</li><li>Node.js 没有 <code>window</code> 对象</li><li><code>typeof</code> 可以安全检查未定义的变量</li><li>环境检查让代码跳过不兼容的环境</li></ul><p><strong>简单记忆</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 只在浏览器中运行的代码</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一行代码 = &quot;如果在浏览器里，才执行下面的代码&quot;</p>`,133)])])}const o=s(t,[["render",l]]),d=JSON.parse('{"path":"/devlog/tech-principles/%F0%9F%92%A1SSR%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3.html","title":"💡 为什么环境检查能解决 SSR 报错？","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761803161000,"contributors":[{"name":"tailunyu","username":"tailunyu","email":"tailunyu@example.com","commits":1,"url":"https://github.com/tailunyu"}],"changelog":[{"hash":"6ef86c47225087bdb49e72347ae00f4edeae475d","time":1761803161000,"email":"tailunyu@example.com","author":"tailunyu","message":"扩展开发手记：添加技术原理、部署指南、问题解决、开发总结四大分类（移除敏感信息）"}]},"filePathRelative":"devlog/tech-principles/💡SSR原理详解.md"}');export{o as comp,d as data};
