import{_ as s,c as a,b as l,o as e}from"./app-hKUo3JAg.js";const i={};function p(t,n){return e(),a("div",null,[...n[0]||(n[0]=[l(`<h1 id="🔧-colab-运行故障排查" tabindex="-1"><a class="header-anchor" href="#🔧-colab-运行故障排查"><span>🔧 Colab 运行故障排查</span></a></h1><h2 id="从你的截图看到的问题" tabindex="-1"><a class="header-anchor" href="#从你的截图看到的问题"><span>从你的截图看到的问题</span></a></h2><h3 id="✅-做对的地方" tabindex="-1"><a class="header-anchor" href="#✅-做对的地方"><span>✅ 做对的地方</span></a></h3><ol><li>✅ 代码已经正确粘贴到代码单元格</li><li>✅ Colab 已经连接（右上角显示 RAM）</li></ol><h3 id="⚠️-可能的问题" tabindex="-1"><a class="header-anchor" href="#⚠️-可能的问题"><span>⚠️ 可能的问题</span></a></h3><hr><h2 id="问题1-代码单元格太长-被折叠了" tabindex="-1"><a class="header-anchor" href="#问题1-代码单元格太长-被折叠了"><span>问题1：代码单元格太长，被折叠了</span></a></h2><p><strong>你的代码有 313 行，Colab 默认只显示部分内容。</strong></p><h3 id="解决方法" tabindex="-1"><a class="header-anchor" href="#解决方法"><span>解决方法：</span></a></h3><h4 id="方法1-点击代码单元格左侧的-▶️-按钮" tabindex="-1"><a class="header-anchor" href="#方法1-点击代码单元格左侧的-▶️-按钮"><span>方法1：点击代码单元格左侧的 ▶️ 按钮</span></a></h4><ul><li>在代码框的<strong>左侧</strong>有一个播放按钮 ▶️</li><li>点击它运行</li></ul><h4 id="方法2-使用快捷键" tabindex="-1"><a class="header-anchor" href="#方法2-使用快捷键"><span>方法2：使用快捷键</span></a></h4><ul><li>点击代码单元格（让它被选中，周围有蓝色边框）</li><li>按 <code>Ctrl+Enter</code>（Mac: <code>Cmd+Enter</code>）运行当前单元格</li><li>或按 <code>Shift+Enter</code> 运行并跳到下一个单元格</li></ul><h4 id="方法3-点击顶部菜单" tabindex="-1"><a class="header-anchor" href="#方法3-点击顶部菜单"><span>方法3：点击顶部菜单</span></a></h4><ul><li>点击顶部的 <code>代码执行程序</code> 或 <code>Runtime</code></li><li>选择 <code>运行所有单元格</code> 或 <code>Run all</code></li></ul><hr><h2 id="问题2-需要先连接到运行时" tabindex="-1"><a class="header-anchor" href="#问题2-需要先连接到运行时"><span>问题2：需要先连接到运行时</span></a></h2><h3 id="检查右上角" tabindex="-1"><a class="header-anchor" href="#检查右上角"><span>检查右上角</span></a></h3><ul><li>如果显示 <code>连接</code> 或 <code>Connect</code> 按钮 → 点击它</li><li>如果显示 RAM 和磁盘图标 → 已连接，没问题</li></ul><h3 id="等待连接" tabindex="-1"><a class="header-anchor" href="#等待连接"><span>等待连接</span></a></h3><ul><li>首次连接需要 10-30 秒</li><li>连接成功后，运行按钮才会工作</li></ul><hr><h2 id="问题3-代码正在运行-但你没看到" tabindex="-1"><a class="header-anchor" href="#问题3-代码正在运行-但你没看到"><span>问题3：代码正在运行，但你没看到</span></a></h2><h3 id="查看左侧的运行状态" tabindex="-1"><a class="header-anchor" href="#查看左侧的运行状态"><span>查看左侧的运行状态</span></a></h3><p>代码单元格左侧会显示：</p><ul><li><strong>空心圆圈 ○</strong>：未运行</li><li><strong>旋转圆圈 ⟳</strong>：正在运行（等待）</li><li><strong>[1]、[2] 等数字</strong>：已运行完成</li></ul><h3 id="查看输出区域" tabindex="-1"><a class="header-anchor" href="#查看输出区域"><span>查看输出区域</span></a></h3><ul><li>代码运行后，<strong>输出会显示在代码框下方</strong></li><li>如果没看到输出，可能代码还在运行</li></ul><hr><h2 id="问题4-使用了-markdown-单元格而不是代码单元格" tabindex="-1"><a class="header-anchor" href="#问题4-使用了-markdown-单元格而不是代码单元格"><span>问题4：使用了 Markdown 单元格而不是代码单元格</span></a></h2><h3 id="检查单元格类型" tabindex="-1"><a class="header-anchor" href="#检查单元格类型"><span>检查单元格类型</span></a></h3><p>从你的截图看，左侧有格式化按钮（B、I、链接等），这可能是 <strong>Markdown 文本单元格</strong>！</p><h3 id="⚠️-如果是文本单元格-需要重新创建代码单元格" tabindex="-1"><a class="header-anchor" href="#⚠️-如果是文本单元格-需要重新创建代码单元格"><span>⚠️ 如果是文本单元格，需要重新创建代码单元格：</span></a></h3><ol><li>删除当前这个单元格</li><li>点击 <code>+ 代码</code> 创建新的代码单元格</li><li>重新粘贴代码</li></ol><p><strong>如何分辨</strong>：</p><ul><li><strong>文本单元格</strong>：有 B、I、链接等格式按钮</li><li><strong>代码单元格</strong>：背景是灰色/深色，有行号，左侧有 ▶️ 按钮</li></ul><hr><h2 id="✅-推荐操作步骤" tabindex="-1"><a class="header-anchor" href="#✅-推荐操作步骤"><span>✅ 推荐操作步骤</span></a></h2><h3 id="步骤1-确认单元格类型" tabindex="-1"><a class="header-anchor" href="#步骤1-确认单元格类型"><span>步骤1：确认单元格类型</span></a></h3><ul><li>从截图看，你的单元格<strong>左侧有格式按钮</strong></li><li>这可能是<strong>文本单元格，不能运行代码</strong>！</li></ul><h3 id="步骤2-创建正确的代码单元格" tabindex="-1"><a class="header-anchor" href="#步骤2-创建正确的代码单元格"><span>步骤2：创建正确的代码单元格</span></a></h3><ol><li>点击顶部的 <code>+ 代码</code> 按钮（不是 + 文本）</li><li>你会看到一个<strong>纯灰色的代码框</strong>，没有格式按钮</li><li>在这个代码框里粘贴代码</li></ol><h3 id="步骤3-运行代码" tabindex="-1"><a class="header-anchor" href="#步骤3-运行代码"><span>步骤3：运行代码</span></a></h3><ul><li>点击代码框<strong>左侧</strong>的 ▶️ 按钮</li><li>或按 <code>Ctrl+Enter</code></li></ul><h3 id="步骤4-等待输出" tabindex="-1"><a class="header-anchor" href="#步骤4-等待输出"><span>步骤4：等待输出</span></a></h3><ul><li>第一次运行需要 5-10 秒</li><li>输出会显示在代码框<strong>下方</strong></li></ul><hr><h2 id="🎯-正确的界面应该是这样" tabindex="-1"><a class="header-anchor" href="#🎯-正确的界面应该是这样"><span>🎯 正确的界面应该是这样</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">┌─────────────────────────────────────┐</span>
<span class="line">│ [+ 代码] [+ 文本]                   │</span>
<span class="line">├─────────────────────────────────────┤</span>
<span class="line">│                                      │</span>
<span class="line">│ [▶️]  ┌──────────────────────┐     │  ← 左侧有播放按钮</span>
<span class="line">│      │ import hashlib        │     │</span>
<span class="line">│      │ import random         │     │  ← 灰色背景，无格式按钮</span>
<span class="line">│      │                       │     │</span>
<span class="line">│      │ print(&quot;...&quot;)          │     │</span>
<span class="line">│      └──────────────────────┘     │</span>
<span class="line">│                                      │</span>
<span class="line">│ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  │  ← 这里会显示输出</span>
<span class="line">│                                      │</span>
<span class="line">│ ============================================│</span>
<span class="line">│ 隐语PSI隐私求交演示 - Google Colab 版      │</span>
<span class="line">│ ============================================│</span>
<span class="line">│                                      │</span>
<span class="line">└─────────────────────────────────────┘</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🔍-从你的截图判断" tabindex="-1"><a class="header-anchor" href="#🔍-从你的截图判断"><span>🔍 从你的截图判断</span></a></h2><p><strong>你可能把代码粘贴到了 Markdown（文本）单元格！</strong></p><p>证据：</p><ol><li>左侧有 B、I、链接等格式按钮</li><li>代码显示为预览格式（右侧）</li><li>没有看到左侧的 ▶️ 运行按钮</li></ol><h3 id="解决方法-1" tabindex="-1"><a class="header-anchor" href="#解决方法-1"><span>解决方法：</span></a></h3><ol><li><strong>删除当前单元格</strong>（点击右上角的垃圾桶图标）</li><li><strong>点击顶部 <code>+ 代码</code></strong> 创建代码单元格</li><li><strong>重新粘贴代码</strong></li><li><strong>点击左侧 ▶️ 按钮运行</strong></li></ol><hr><h2 id="🆘-如果还是不行" tabindex="-1"><a class="header-anchor" href="#🆘-如果还是不行"><span>🆘 如果还是不行</span></a></h2><h3 id="尝试精简版代码" tabindex="-1"><a class="header-anchor" href="#尝试精简版代码"><span>尝试精简版代码</span></a></h3><p>使用更短的代码测试：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token comment"># 测试代码</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Colab 运行正常！&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> hashlib</span>
<span class="line"></span>
<span class="line">data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token number">1002</span><span class="token punctuation">,</span> <span class="token number">1003</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;测试数据: </span><span class="token interpolation"><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">hashed <span class="token operator">=</span> <span class="token punctuation">[</span>hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> data<span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;哈希结果: </span><span class="token interpolation"><span class="token punctuation">{</span>hashed<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token format-spec">16]</span><span class="token punctuation">}</span></span><span class="token string">...&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;✅ 如果你看到这条消息，说明 Colab 工作正常！&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤"><span>步骤：</span></a></h3><ol><li>创建新的代码单元格（<code>+ 代码</code>）</li><li>粘贴上面的测试代码</li><li>点击 ▶️ 运行</li><li>如果能看到输出，说明 Colab 正常</li><li>然后再粘贴完整代码</li></ol><hr><h2 id="⏰-预期运行时间" tabindex="-1"><a class="header-anchor" href="#⏰-预期运行时间"><span>⏰ 预期运行时间</span></a></h2><ul><li>首次连接：10-30 秒</li><li>代码运行：5-10 秒</li><li>总计：15-40 秒</li></ul><p>如果超过 1 分钟还没反应，可能需要：</p><ol><li>刷新页面重试</li><li>检查网络连接</li><li>使用精简版代码</li></ol><hr><h2 id="📸-正确操作的标志" tabindex="-1"><a class="header-anchor" href="#📸-正确操作的标志"><span>📸 正确操作的标志</span></a></h2><p>运行成功后，你应该看到：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">============================================================</span>
<span class="line">隐语PSI隐私求交演示 - Google Colab 版</span>
<span class="line">============================================================</span>
<span class="line"></span>
<span class="line">--- 1. 简化版 PSI 演示 (哈希 + 集合求交) ---</span>
<span class="line"></span>
<span class="line">--- 医院A (简化版) ---</span>
<span class="line">加载了数据: [1001, 1002, 1003, 1005, 1007]</span>
<span class="line"></span>
<span class="line">--- 医院B (简化版) ---</span>
<span class="line">加载了数据: [1002, 1003, 1004, 1006, 1008]</span>
<span class="line"></span>
<span class="line">✅ 简化版 PSI 计算完成！</span>
<span class="line">   共同患者 ID (明文交集): [1002, 1003]</span>
<span class="line">   共同患者数量: 2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="💡-快速解决方案" tabindex="-1"><a class="header-anchor" href="#💡-快速解决方案"><span>💡 快速解决方案</span></a></h2><p><strong>最快的方法</strong>：</p><ol><li>点击顶部 <code>文件</code> → <code>新建笔记本</code>（重新开始）</li><li><strong>确保点击 <code>+ 代码</code></strong>（不是 + 文本）</li><li>粘贴代码</li><li>点击 ▶️ 运行</li></ol><p><strong>5 分钟搞定！</strong></p>`,77)])])}const c=s(i,[["render",p]]),r=JSON.parse('{"path":"/devlog/troubleshooting/Colab%E8%BF%90%E8%A1%8C%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5.html","title":"🔧 Colab 运行故障排查","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761803161000,"contributors":[{"name":"tailunyu","username":"tailunyu","email":"tailunyu@example.com","commits":1,"url":"https://github.com/tailunyu"}],"changelog":[{"hash":"6ef86c47225087bdb49e72347ae00f4edeae475d","time":1761803161000,"email":"tailunyu@example.com","author":"tailunyu","message":"扩展开发手记：添加技术原理、部署指南、问题解决、开发总结四大分类（移除敏感信息）"}]},"filePathRelative":"devlog/troubleshooting/Colab运行故障排查.md"}');export{c as comp,r as data};
