import{_ as m,c as g,b as u,a as s,e as l,o as x}from"./app-B3w0Vqk4.js";if(typeof window<"u"){async function p(a){const t=new TextEncoder().encode(a),r=await crypto.subtle.digest("SHA-256",t);return Array.from(new Uint8Array(r)).map(e=>e.toString(16).padStart(2,"0")).join("")}window.runPSI=async function(){const a=event.target;a.textContent="⏳ 计算中...",a.disabled=!0;const t=document.getElementById("hospital-a").value,r=document.getElementById("hospital-b").value,i=t.split(",").map(n=>n.trim()).filter(n=>n),e=r.split(",").map(n=>n.trim()).filter(n=>n),h=await Promise.all(i.map(n=>p(n))),b=await Promise.all(e.map(n=>p(n))),o=[],v=new Map;for(let n=0;n<i.length;n++)v.set(h[n],i[n]);for(let n=0;n<e.length;n++)v.has(b[n])&&o.push(e[n]);document.getElementById("intersection-result").innerHTML=`<strong style="color: #667eea;">共同患者 ID：</strong><span style="font-size: 20px; font-weight: bold; color: #764ba2;">[${o.join(", ")}]</span>`,document.getElementById("count-result").innerHTML=`<strong style="color: #764ba2;">共同患者数量：</strong><span style="font-size: 20px; font-weight: bold; color: #667eea;">${o.length}</span>`;let d='<div style="color: #2e7d32; font-weight: bold; margin-bottom: 12px; font-size: 16px;">参与方 A 的哈希值：</div>';i.slice(0,3).forEach((n,c)=>{d+=`<div style="margin: 8px 0; padding: 8px; background: #f1f8f4; border-radius: 4px; color: #333; font-size: 14px;">
        <span style="color: #1976d2; font-weight: bold;">${n}</span>
        <span style="color: #666;">→</span>
        <span style="color: #388e3c; font-family: monospace;">${h[c].substring(0,24)}...</span>
      </div>`}),d+='<div style="color: #2e7d32; font-weight: bold; margin-top: 20px; margin-bottom: 12px; font-size: 16px;">参与方 B 的哈希值：</div>',e.slice(0,3).forEach((n,c)=>{d+=`<div style="margin: 8px 0; padding: 8px; background: #f1f8f4; border-radius: 4px; color: #333; font-size: 14px;">
        <span style="color: #1976d2; font-weight: bold;">${n}</span>
        <span style="color: #666;">→</span>
        <span style="color: #388e3c; font-family: monospace;">${b[c].substring(0,24)}...</span>
      </div>`}),document.getElementById("hash-content").innerHTML=d,document.getElementById("psi-result").style.display="block",a.textContent="🔒 计算隐私交集",a.disabled=!1},document.addEventListener("DOMContentLoaded",function(){const a=document.querySelector("#psi-demo button");a&&(a.addEventListener("mouseover",function(){this.style.transform="translateY(-2px)",this.style.boxShadow="0 5px 20px rgba(102, 126, 234, 0.4)"}),a.addEventListener("mouseout",function(){this.style.transform="translateY(0)",this.style.boxShadow="none"}))})}const f={};function y(p,a,t,r,i,e){return x(),g("div",null,[...a[0]||(a[0]=[u(`<h1 id="psi" tabindex="-1"><a class="header-anchor" href="#psi"><span>PSI</span></a></h1><blockquote><p>Private Set Intersection - 让数据在隐私保护下产生价值</p></blockquote><hr><h2 id="场景痛点" tabindex="-1"><a class="header-anchor" href="#场景痛点"><span>场景痛点</span></a></h2><h3 id="数据流通的根本困境" tabindex="-1"><a class="header-anchor" href="#数据流通的根本困境"><span>数据流通的根本困境</span></a></h3><p>在数字经济时代，<strong>数据只有流通才能产生价值</strong>。但数据流通面临着不可调和的矛盾：</p><h4 id="价值创造的需求" tabindex="-1"><a class="header-anchor" href="#价值创造的需求"><span>价值创造的需求</span></a></h4><ul><li><strong>跨组织协作</strong>：多方数据联合才能产生更大价值</li><li><strong>提升决策质量</strong>：更全面的数据带来更准确的洞察</li><li><strong>优化资源配置</strong>：数据共享可以减少重复和浪费</li></ul><h4 id="隐私保护的刚需" tabindex="-1"><a class="header-anchor" href="#隐私保护的刚需"><span>隐私保护的刚需</span></a></h4><ul><li><strong>法规强制</strong>：数据安全法、个人信息保护法等严格监管</li><li><strong>商业机密</strong>：企业核心资产不能外泄</li><li><strong>个人权利</strong>：公民隐私权受法律保护</li></ul><h4 id="传统方案的根本缺陷" tabindex="-1"><a class="header-anchor" href="#传统方案的根本缺陷"><span>传统方案的根本缺陷</span></a></h4><table><thead><tr><th>方案</th><th>本质问题</th><th>结果</th></tr></thead><tbody><tr><td><strong>明文交换</strong></td><td>数据完全暴露</td><td>❌ 隐私全失，违法违规</td></tr><tr><td><strong>中心化第三方</strong></td><td>信任风险转移</td><td>⚠️ 无法解决信任问题</td></tr><tr><td><strong>不流通</strong></td><td>数据孤岛</td><td>📉 价值无法释放</td></tr></tbody></table><h4 id="核心矛盾" tabindex="-1"><a class="header-anchor" href="#核心矛盾"><span>核心矛盾</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">数据价值 ⇄ 隐私保护</span>
<span class="line">   ↓</span>
<span class="line"> 不可兼得？</span>
<span class="line">   ↓</span>
<span class="line">PSI 技术破解困局</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>本质问题：</strong></p><ul><li><strong>想要：</strong> 计算结果（如交集、统计值）</li><li><strong>不能：</strong> 泄露原始数据</li><li><strong>传统技术：</strong> 二选一，无法兼得</li><li><strong>PSI 方案：</strong> 鱼和熊掌可以兼得</li></ul><hr><h2 id="技术原理" tabindex="-1"><a class="header-anchor" href="#技术原理"><span>技术原理</span></a></h2><h3 id="什么是-psi" tabindex="-1"><a class="header-anchor" href="#什么是-psi"><span>什么是 PSI？</span></a></h3><p>PSI（Private Set Intersection，隐私求交）允许多方在<strong>不泄露各自数据</strong>的情况下，计算出数据集的<strong>交集</strong>。</p><p><strong>核心特点：</strong></p><ul><li><strong>数据可用不可见</strong>：可以计算交集，但看不到对方的完整数据</li><li><strong>只披露交集</strong>：双方只知道交集结果，不知道对方的其他数据</li><li><strong>加密状态计算</strong>：原始数据在加密状态下计算，不会明文传输</li></ul><h3 id="psi-工作流程-5步" tabindex="-1"><a class="header-anchor" href="#psi-工作流程-5步"><span>PSI 工作流程（5步）</span></a></h3><h4 id="步骤1-数据准备" tabindex="-1"><a class="header-anchor" href="#步骤1-数据准备"><span>步骤1：数据准备</span></a></h4><p>双方各自持有自己的数据集：</p><ul><li>参与方 A：<code>[1001, 1002, 1003, 1005, 1007]</code></li><li>参与方 B：<code>[1002, 1003, 1004, 1006, 1008]</code></li></ul><h4 id="步骤2-本地加密" tabindex="-1"><a class="header-anchor" href="#步骤2-本地加密"><span>步骤2：本地加密</span></a></h4><p>各方使用**椭圆曲线加密（ECC）**对自己的数据进行加密：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">1001 → 哈希 → cd6357efdd966de8c0cb...</span>
<span class="line">1002 → 哈希 → 8277e091c4d5fa23eb1c...</span>
<span class="line">1003 → 哈希 → e2d0fe19ab5c8d9f3e67...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>关键</strong>：原始数据不会发送给对方！</p><h4 id="步骤3-交换密文" tabindex="-1"><a class="header-anchor" href="#步骤3-交换密文"><span>步骤3：交换密文</span></a></h4><p>双方交换<strong>加密后的数据</strong>（不是原始数据）：</p><ul><li>传输的都是哈希值</li><li>无法反推原始数据</li></ul><h4 id="步骤4-计算交集" tabindex="-1"><a class="header-anchor" href="#步骤4-计算交集"><span>步骤4：计算交集</span></a></h4><p>对比加密后的数据，找出相同的哈希值：</p><ul><li>只有相同的原始数据才会产生相同的哈希</li><li>找到匹配的哈希 → 找到交集</li></ul><h4 id="步骤5-返回结果" tabindex="-1"><a class="header-anchor" href="#步骤5-返回结果"><span>步骤5：返回结果</span></a></h4><p>解密交集结果：<code>[1002, 1003]</code></p><ul><li>双方知道：交集是 <code>[1002, 1003]</code></li><li>双方不知道：对方的其他数据</li></ul><h3 id="隐私保护的核心" tabindex="-1"><a class="header-anchor" href="#隐私保护的核心"><span>隐私保护的核心</span></a></h3><h4 id="参与方-a-的视角" tabindex="-1"><a class="header-anchor" href="#参与方-a-的视角"><span>参与方 A 的视角</span></a></h4><p><strong>知道：</strong></p><ul><li>自己的完整数据：<code>[1001, 1002, 1003, 1005, 1007]</code></li><li>交集结果：<code>[1002, 1003]</code></li></ul><p><strong>不知道：</strong></p><ul><li>参与方 B 的其他数据：<code>1004, 1006, 1008</code></li><li>参与方 B 有多少数据</li></ul><h4 id="参与方-b-的视角" tabindex="-1"><a class="header-anchor" href="#参与方-b-的视角"><span>参与方 B 的视角</span></a></h4><p><strong>知道：</strong></p><ul><li>自己的完整数据：<code>[1002, 1003, 1004, 1006, 1008]</code></li><li>交集结果：<code>[1002, 1003]</code></li></ul><p><strong>不知道：</strong></p><ul><li>参与方 A 的其他数据：<code>1001, 1005, 1007</code></li><li>参与方 A 有多少数据</li></ul><hr><h2 id="在线交互演示" tabindex="-1"><a class="header-anchor" href="#在线交互演示"><span>在线交互演示</span></a></h2><div class="hint-container tip"><p class="hint-container-title">操作提示</p><p>下方演示可以直接在网页上运行，尝试修改数据看看效果！</p></div>`,53),s("div",{id:"psi-demo",style:{padding:"25px",background:"linear-gradient(135deg, #667eea 0%, #764ba2 100%)","border-radius":"12px",margin:"30px 0","box-shadow":"0 10px 40px rgba(0,0,0,0.2)"}},[s("h3",{style:{color:"white","margin-top":"0","font-size":"24px"}},"PSI 演示"),s("div",{style:{background:"white",padding:"20px","border-radius":"8px",margin:"15px 0"}},[s("div",{style:{"margin-bottom":"20px"}},[s("label",{style:{display:"block","font-weight":"bold","margin-bottom":"8px",color:"#667eea"}},"参与方 A 的数据（逗号分隔）："),s("input",{type:"text",id:"hospital-a",value:"1001,1002,1003,1005,1007",style:{width:"100%",padding:"12px","font-size":"16px",border:"2px solid #667eea","border-radius":"6px","box-sizing":"border-box"}})]),s("div",{style:{"margin-bottom":"20px"}},[s("label",{style:{display:"block","font-weight":"bold","margin-bottom":"8px",color:"#764ba2"}},"参与方 B 的数据（逗号分隔）："),s("input",{type:"text",id:"hospital-b",value:"1002,1003,1004,1006,1008",style:{width:"100%",padding:"12px","font-size":"16px",border:"2px solid #764ba2","border-radius":"6px","box-sizing":"border-box"}})]),s("button",{onclick:"runPSI()",style:{width:"100%",background:"linear-gradient(135deg, #667eea 0%, #764ba2 100%)",color:"white",border:"none",padding:"15px 30px","font-size":"18px","font-weight":"bold","border-radius":"8px",cursor:"pointer",transition:"transform 0.2s, box-shadow 0.2s"}},"🔒 计算隐私交集")]),s("div",{id:"psi-result",style:{display:"none",background:"white",padding:"20px","border-radius":"8px","margin-top":"15px",animation:"fadeIn 0.5s"}},[s("h4",{style:{color:"#667eea","margin-top":"0","font-size":"20px"}},"PSI 计算完成"),s("div",{id:"intersection-result",style:{padding:"15px",background:"#f0f4ff","border-left":"4px solid #667eea",margin:"15px 0","border-radius":"4px","font-size":"16px",color:"#333"}}),s("div",{id:"count-result",style:{padding:"15px",background:"#f0f4ff","border-left":"4px solid #764ba2",margin:"15px 0","border-radius":"4px","font-size":"16px",color:"#333"}}),s("div",{style:{padding:"20px",background:"#fff8e1","border-left":"5px solid #ff9800","border-radius":"8px","font-size":"16px",color:"#333","line-height":"1.8"}},[s("strong",{style:{"font-size":"17px",color:"#e65100"}},"隐私保护说明："),s("br"),s("div",{style:{"margin-top":"10px"}},[l(" • 参与方 A 不知道参与方 B 的完整数据列表"),s("br"),l(" • 参与方 B 不知道参与方 A 的完整数据列表"),s("br"),l(" • 双方只知道交集结果"),s("br"),l(" • 数据在加密状态下计算 ")])]),s("div",{id:"hash-details",style:{"margin-top":"15px",padding:"20px",background:"#e8f5e9","border-radius":"8px","border-left":"5px solid #4caf50"}},[s("strong",{style:{"font-size":"17px",color:"#2e7d32"}},"加密过程（SHA-256 哈希）："),s("div",{id:"hash-content",style:{"margin-top":"15px","font-size":"15px",color:"#333","line-height":"1.8","font-family":"'Courier New', Consolas, monospace","max-height":"300px","overflow-y":"auto"}})])])],-1),u('<hr><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h2><p>PSI 技术在多个领域都有广泛应用，以下是典型场景：</p><h3 id="医疗健康" tabindex="-1"><a class="header-anchor" href="#医疗健康"><span>医疗健康</span></a></h3><p><strong>场景1：跨医院联合诊疗</strong></p><ul><li><strong>参与方</strong>：多家医院</li><li><strong>痛点</strong>：各医院有独立的患者数据，无法直接共享</li><li><strong>解决方案</strong>：使用 PSI 找出共同患者，在不泄露其他患者信息的前提下进行联合诊疗</li><li><strong>价值</strong>：提供更全面的诊疗方案，提升医疗质量</li></ul><p><strong>场景2：流行病学研究</strong></p><ul><li><strong>参与方</strong>：医院 + 疾控中心</li><li><strong>痛点</strong>：疾病传播分析需要跨机构数据，但受隐私法规限制</li><li><strong>解决方案</strong>：PSI 识别感染者交集，追踪传播链</li><li><strong>价值</strong>：及时预警和防控，保护公共卫生</li></ul><p><strong>场景3：药物临床试验</strong></p><ul><li><strong>参与方</strong>：制药公司 + 医院</li><li><strong>痛点</strong>：需要筛选符合条件的受试者，但不能泄露患者信息</li><li><strong>解决方案</strong>：PSI 匹配符合试验条件的患者</li><li><strong>价值</strong>：加速新药研发，降低招募成本</li></ul><hr><h3 id="金融领域" tabindex="-1"><a class="header-anchor" href="#金融领域"><span>金融领域</span></a></h3><p><strong>场景1：多银行反欺诈</strong></p><ul><li><strong>参与方</strong>：多家银行</li><li><strong>痛点</strong>：欺诈分子在多个银行行骗，但银行间不能直接共享客户名单</li><li><strong>解决方案</strong>：PSI 识别共同的高风险用户，联合防范</li><li><strong>价值</strong>：降低欺诈损失，保护客户资产</li></ul><p><strong>场景2：联合信用评估</strong></p><ul><li><strong>参与方</strong>：银行 + 征信机构</li><li><strong>痛点</strong>：信用评估需要多维度数据，但数据分散在不同机构</li><li><strong>解决方案</strong>：PSI 对齐用户数据，联合建模</li><li><strong>价值</strong>：提高信用评估准确性，降低坏账率</li></ul><p><strong>场景3：反洗钱监测</strong></p><ul><li><strong>参与方</strong>：多个金融机构</li><li><strong>痛点</strong>：洗钱行为涉及多个金融机构，需要联合监测</li><li><strong>解决方案</strong>：PSI 识别可疑账户交集</li><li><strong>价值</strong>：满足监管要求，打击金融犯罪</li></ul><hr><h3 id="政务与公共服务" tabindex="-1"><a class="header-anchor" href="#政务与公共服务"><span>政务与公共服务</span></a></h3><p><strong>场景1：跨部门数据协同</strong></p><ul><li><strong>参与方</strong>：公安、民政、税务等政府部门</li><li><strong>痛点</strong>：数据孤岛严重，跨部门协作困难</li><li><strong>解决方案</strong>：PSI 实现数据对齐，不泄露敏感信息</li><li><strong>价值</strong>：提升政府治理效率，优化公共服务</li></ul><p><strong>场景2：精准扶贫</strong></p><ul><li><strong>参与方</strong>：民政、扶贫办、医保等部门</li><li><strong>痛点</strong>：需要识别真正的困难群众，但数据分散</li><li><strong>解决方案</strong>：PSI 多部门数据比对，精准识别</li><li><strong>价值</strong>：确保扶贫资源用在刀刃上</li></ul><hr><h3 id="互联网与广告" tabindex="-1"><a class="header-anchor" href="#互联网与广告"><span>互联网与广告</span></a></h3><p><strong>场景1：跨平台精准投放</strong></p><ul><li><strong>参与方</strong>：多个广告平台</li><li><strong>痛点</strong>：广告主希望触达特定用户，但用户数据分散在不同平台</li><li><strong>解决方案</strong>：PSI 找出共同用户，联合投放</li><li><strong>价值</strong>：提高广告转化率，降低投放成本</li></ul><p><strong>场景2：电商联合营销</strong></p><ul><li><strong>参与方</strong>：多个电商平台或商家</li><li><strong>痛点</strong>：希望识别高价值客户，但不能共享用户数据</li><li><strong>解决方案</strong>：PSI 识别共同的高价值客户</li><li><strong>价值</strong>：精准营销，提升 ROI</li></ul><hr><h3 id="场景对比" tabindex="-1"><a class="header-anchor" href="#场景对比"><span>场景对比</span></a></h3><table><thead><tr><th>领域</th><th>典型参与方</th><th>数据敏感度</th><th>PSI价值</th><th>技术要求</th></tr></thead><tbody><tr><td><strong>医疗</strong></td><td>医院、药企、疾控</td><td>极高</td><td>合规的数据协作</td><td>高安全性</td></tr><tr><td><strong>金融</strong></td><td>银行、征信、支付</td><td>极高</td><td>风控与合规</td><td>高性能</td></tr><tr><td><strong>政务</strong></td><td>政府部门</td><td>高</td><td>打破数据孤岛</td><td>高可信度</td></tr><tr><td><strong>互联网</strong></td><td>平台、广告商</td><td>中</td><td>精准营销</td><td>高效率</td></tr></tbody></table><hr><h2 id="技术优势" tabindex="-1"><a class="header-anchor" href="#技术优势"><span>技术优势</span></a></h2><h3 id="与传统方案对比" tabindex="-1"><a class="header-anchor" href="#与传统方案对比"><span>与传统方案对比</span></a></h3><table><thead><tr><th>方案</th><th>隐私保护</th><th>计算效率</th><th>安全性</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>PSI (隐私求交)</strong></td><td>⭐⭐⭐⭐⭐</td><td>⭐⭐⭐⭐</td><td>⭐⭐⭐⭐⭐</td><td>ID对齐、黑名单比对</td></tr><tr><td><strong>明文传输</strong></td><td>❌</td><td>⭐⭐⭐⭐⭐</td><td>❌</td><td>完全泄露隐私</td></tr><tr><td><strong>中心化平台</strong></td><td>⭐⭐</td><td>⭐⭐⭐⭐</td><td>⭐⭐⭐</td><td>需要信任第三方</td></tr><tr><td><strong>同态加密</strong></td><td>⭐⭐⭐⭐⭐</td><td>⭐⭐</td><td>⭐⭐⭐⭐⭐</td><td>计算开销大</td></tr></tbody></table><h3 id="核心优势" tabindex="-1"><a class="header-anchor" href="#核心优势"><span>核心优势</span></a></h3><ol><li><p><strong>强隐私保护</strong></p><ul><li>基于椭圆曲线加密（ECC），需要 10²² 年才能暴力破解</li><li>加盐和随机化，防止彩虹表攻击</li><li>不经意传输（OT）协议，保护查询隐私</li></ul></li><li><p><strong>高性能</strong></p><ul><li>256位ECC = 3072位RSA安全性</li><li>加解密速度比RSA快10倍以上</li><li>支持百万级数据集计算</li></ul></li><li><p><strong>合规性</strong></p><ul><li>符合《数据安全法》要求</li><li>满足《个人信息保护法》规范</li><li>通过等保三级认证</li></ul></li><li><p><strong>易集成</strong></p><ul><li>提供多语言SDK（Python、Java、C++）</li><li>开箱即用的API</li><li>完善的文档和示例</li></ul></li></ol><hr><h2 id="了解更多" tabindex="-1"><a class="header-anchor" href="#了解更多"><span>了解更多</span></a></h2><h3 id="深入学习-真实的-secretflow-psi" tabindex="-1"><a class="header-anchor" href="#深入学习-真实的-secretflow-psi"><span>深入学习：真实的 SecretFlow PSI</span></a></h3><p>上方演示使用 Web Crypto API 实现了简化版 PSI，展示了核心原理。</p>',43),s("div",{style:{background:"linear-gradient(135deg, #f093fb 0%, #f5576c 100%)","border-radius":"16px",padding:"30px",margin:"40px 0","box-shadow":"0 10px 40px rgba(245, 87, 108, 0.3)",position:"relative",overflow:"hidden"}},[s("div",{style:{position:"absolute",top:"-50px",right:"-50px",width:"200px",height:"200px",background:"rgba(255,255,255,0.1)","border-radius":"50%"}}),s("div",{style:{position:"absolute",bottom:"-30px",left:"-30px",width:"150px",height:"150px",background:"rgba(255,255,255,0.1)","border-radius":"50%"}}),s("div",{style:{position:"relative","z-index":"1"}},[s("h3",{style:{color:"white","margin-top":"0","font-size":"24px","text-align":"center","margin-bottom":"15px"}},"体验真实的 SecretFlow PSI"),s("p",{style:{color:"rgba(255,255,255,0.95)","text-align":"center","font-size":"16px","margin-bottom":"25px","line-height":"1.6"}},[l("在 Google Colab 中运行完整的 SecretFlow 代码"),s("br"),l("包含 ECDH-PSI 协议和 OT 实现")]),s("div",{style:{"text-align":"center"}},[s("a",{href:"https://colab.research.google.com/drive/18VPyyAQOlCIQkgvESY97wOYM23oPwLi6?usp=sharing",target:"_blank",style:{display:"inline-block",background:"white",color:"#f5576c",padding:"15px 40px","border-radius":"50px","font-weight":"bold","font-size":"18px","text-decoration":"none","box-shadow":"0 8px 20px rgba(0,0,0,0.2)",transition:"all 0.3s ease",border:"3px solid white"},onmouseover:"this.style.transform='translateY(-3px) scale(1.05)'; this.style.boxShadow='0 12px 30px rgba(0,0,0,0.3)';",onmouseout:"this.style.transform='translateY(0) scale(1)'; this.style.boxShadow='0 8px 20px rgba(0,0,0,0.2)';"}," 📒 打开 Colab 笔记本 → ")]),s("div",{style:{"margin-top":"25px",display:"flex","justify-content":"space-around","flex-wrap":"wrap"}},[s("div",{style:{"text-align":"center",color:"white",margin:"10px"}},[s("div",{style:{"font-size":"28px","font-weight":"bold"}},"313"),s("div",{style:{"font-size":"14px",opacity:"0.9"}},"行完整代码")]),s("div",{style:{"text-align":"center",color:"white",margin:"10px"}},[s("div",{style:{"font-size":"28px","font-weight":"bold"}},"2"),s("div",{style:{"font-size":"14px",opacity:"0.9"}},"种 PSI 算法")]),s("div",{style:{"text-align":"center",color:"white",margin:"10px"}},[s("div",{style:{"font-size":"28px","font-weight":"bold"}},"0"),s("div",{style:{"font-size":"14px",opacity:"0.9"}},"环境配置")])])])],-1),u(`<h3 id="关键技术详解" tabindex="-1"><a class="header-anchor" href="#关键技术详解"><span>关键技术详解</span></a></h3><details class="hint-container details"><summary>椭圆曲线加密（ECC）详解</summary><h3 id="什么是椭圆曲线" tabindex="-1"><a class="header-anchor" href="#什么是椭圆曲线"><span>什么是椭圆曲线？</span></a></h3><p><strong>数学定义</strong>：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">y² = x³ + ax + b</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>可视化</strong>（像一个对称的曲线）：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">      y</span>
<span class="line">      ↑</span>
<span class="line">      |     ╱╲</span>
<span class="line">      |    ╱  ╲</span>
<span class="line">  ————|———╱────╲————→ x</span>
<span class="line">      |  ╱      ╲</span>
<span class="line">      | ╱        ╲</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为什么用椭圆曲线" tabindex="-1"><a class="header-anchor" href="#为什么用椭圆曲线"><span>为什么用椭圆曲线？</span></a></h3><h4 id="传统加密-rsa-vs-椭圆曲线-ecc" tabindex="-1"><a class="header-anchor" href="#传统加密-rsa-vs-椭圆曲线-ecc"><span>传统加密 RSA vs 椭圆曲线 ECC</span></a></h4><table><thead><tr><th>对比</th><th>RSA</th><th>ECC</th></tr></thead><tbody><tr><td><strong>密钥长度</strong></td><td>2048 位</td><td>256 位</td></tr><tr><td><strong>安全强度</strong></td><td>相同</td><td>相同</td></tr><tr><td><strong>计算速度</strong></td><td>慢</td><td>快</td></tr><tr><td><strong>适合移动设备</strong></td><td>❌</td><td>✅</td></tr></tbody></table><p><strong>类比</strong>：</p><ul><li><strong>RSA</strong>：像一把巨大的钥匙（2048位）</li><li><strong>ECC</strong>：像一把小巧的钥匙（256位），但同样安全</li></ul><hr><h3 id="椭圆曲线在-psi-中的应用" tabindex="-1"><a class="header-anchor" href="#椭圆曲线在-psi-中的应用"><span>椭圆曲线在 PSI 中的应用</span></a></h3><h4 id="ecdh-psi-协议-secretflow-使用的" tabindex="-1"><a class="header-anchor" href="#ecdh-psi-协议-secretflow-使用的"><span>ECDH-PSI 协议（SecretFlow 使用的）</span></a></h4><p><strong>核心思想</strong>：利用椭圆曲线的特殊性质</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">数学性质（交换律）：</span>
<span class="line">a × (b × G) = b × (a × G)</span>
<span class="line">    ↓</span>
<span class="line">双方用不同密钥加密，结果相同！</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>具体过程</strong>：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">参与方 A 的数据：[1001, 1002, 1003]</span>
<span class="line">参与方 B 的数据：[1002, 1004, 1005]</span>
<span class="line"></span>
<span class="line">步骤1：参与方 A 生成私钥 a</span>
<span class="line">步骤2：参与方 B 生成私钥 b</span>
<span class="line"></span>
<span class="line">步骤3：参与方 A 加密自己的数据</span>
<span class="line">    加密(1001) = a × Hash(1001)  → A₁</span>
<span class="line">    加密(1002) = a × Hash(1002)  → A₂</span>
<span class="line">    加密(1003) = a × Hash(1003)  → A₃</span>
<span class="line">    </span>
<span class="line">步骤4：参与方 A 发送 [A₁, A₂, A₃] 给参与方 B</span>
<span class="line"></span>
<span class="line">步骤5：参与方 B 再次加密（用自己的密钥 b）</span>
<span class="line">    b × A₁ = b × (a × Hash(1001))</span>
<span class="line">    b × A₂ = b × (a × Hash(1002))</span>
<span class="line">    b × A₃ = b × (a × Hash(1003))</span>
<span class="line">    </span>
<span class="line">步骤6：参与方 B 也加密自己的数据</span>
<span class="line">    加密(1002) = a × Hash(1002)  → B₁</span>
<span class="line">    加密(1004) = a × Hash(1004)  → B₂</span>
<span class="line">    加密(1005) = a × Hash(1005)  → B₃</span>
<span class="line"></span>
<span class="line">步骤7：参与方 B 发送给参与方 A，A 再加密</span>
<span class="line">    a × B₁ = a × (b × Hash(1002))</span>
<span class="line">    </span>
<span class="line">步骤8：比较双重加密的结果</span>
<span class="line">    a × (b × Hash(1002)) = b × (a × Hash(1002))</span>
<span class="line">    ↑ 参与方 B 的      ↑ 参与方 A 的</span>
<span class="line">    </span>
<span class="line">    两个结果相同！→ 找到交集：1002</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>关键点</strong>：</p><ul><li>✅ 双方都不知道对方的原始数据</li><li>✅ 双方都不知道对方的私钥</li><li>✅ 只有交集的双重加密结果相同</li><li>✅ 无法暴力破解（椭圆曲线离散对数难题）</li></ul><hr><h3 id="为什么无法暴力破解" tabindex="-1"><a class="header-anchor" href="#为什么无法暴力破解"><span>为什么无法暴力破解？</span></a></h3><p><strong>椭圆曲线离散对数问题</strong>：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">已知：G（基点）、a × G（公钥）</span>
<span class="line">求：a（私钥）</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>难度</strong>：</p><ul><li>RSA 2048位 ≈ 需要 2¹¹² 次运算</li><li>ECC 256位 ≈ 需要 2¹²⁸ 次运算</li></ul><p><strong>时间估算</strong>：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">假设你有全世界最快的超级计算机：</span>
<span class="line">- 速度：1 Exaflop = 10¹⁸ 次运算/秒</span>
<span class="line">- 破解 ECC-256：需要 10²² 年</span>
<span class="line">- 宇宙年龄：只有 138 亿年（10¹⁰ 年）</span>
<span class="line"></span>
<span class="line">结论：比宇宙寿命还长 1 万亿倍！</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>OT 协议（Oblivious Transfer）详解</summary><h3 id="什么是-ot" tabindex="-1"><a class="header-anchor" href="#什么是-ot"><span>什么是 OT？</span></a></h3><p><strong>英文</strong>：Oblivious Transfer<br><strong>核心</strong>：选择性接收信息，发送方不知道你选了什么</p><h3 id="生活类比" tabindex="-1"><a class="header-anchor" href="#生活类比"><span>生活类比</span></a></h3><p><strong>场景</strong>：图书馆借书</p><p><strong>普通方式</strong>（不安全）：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">你：我要借《密码学》</span>
<span class="line">图书管理员：好的（知道你借了什么）</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>OT 方式</strong>（安全）：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">你：我要借 [秘密选择：第3本]</span>
<span class="line">图书管理员：这是所有书的加密版本</span>
<span class="line">你：[只解密第3本]</span>
<span class="line"></span>
<span class="line">结果：</span>
<span class="line">- ✅ 你拿到了《密码学》</span>
<span class="line">- ✅ 图书管理员不知道你借了哪本</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="ot-在-psi-中的应用" tabindex="-1"><a class="header-anchor" href="#ot-在-psi-中的应用"><span>OT 在 PSI 中的应用</span></a></h3><h4 id="_1-out-of-2-ot-最基础的" tabindex="-1"><a class="header-anchor" href="#_1-out-of-2-ot-最基础的"><span>1-out-of-2 OT（最基础的）</span></a></h4><p><strong>场景</strong>：参与方 A 想知道患者 1002 是否在参与方 B</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">参与方 B 有数据：[1002, 1004, 1005]</span>
<span class="line"></span>
<span class="line">参与方 A 想查询：1002 在不在？</span>
<span class="line"></span>
<span class="line">传统方式：</span>
<span class="line">参与方 A：你有 1002 吗？</span>
<span class="line">参与方 B：有</span>
<span class="line">    ↓</span>
<span class="line">问题：参与方 B 知道参与方 A 在查谁</span>
<span class="line"></span>
<span class="line">OT 方式：</span>
<span class="line">步骤1：参与方 B 准备两个消息</span>
<span class="line">    m₀ = &quot;不在&quot;（加密）</span>
<span class="line">    m₁ = &quot;在&quot;（加密）</span>
<span class="line"></span>
<span class="line">步骤2：参与方 A 秘密选择（基于 1002 是否在自己数据里）</span>
<span class="line">    选择 b ∈ {0, 1}</span>
<span class="line"></span>
<span class="line">步骤3：参与方 A 只能解密一个消息</span>
<span class="line">    如果 1002 在：解密 m₁ → &quot;在&quot;</span>
<span class="line">    如果不在：解密 m₀ → &quot;不在&quot;</span>
<span class="line"></span>
<span class="line">结果：</span>
<span class="line">- ✅ 参与方 A 知道了结果</span>
<span class="line">- ✅ 参与方 B 不知道参与方 A 查了什么</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="kkrt-psi-secretflow-另一种协议" tabindex="-1"><a class="header-anchor" href="#kkrt-psi-secretflow-另一种协议"><span>KKRT-PSI（SecretFlow 另一种协议）</span></a></h4><p><strong>使用大量 OT 来实现大规模 PSI</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">参与方 A 有 10,000 个患者</span>
<span class="line">参与方 B 有 10,000 个患者</span>
<span class="line"></span>
<span class="line">使用 KKRT：</span>
<span class="line">1. 用 OT 扩展技术（减少计算量）</span>
<span class="line">2. 批量处理（并行计算）</span>
<span class="line">3. 只传输最小必要信息</span>
<span class="line"></span>
<span class="line">性能：</span>
<span class="line">- 普通 OT：10,000 × 10,000 = 1亿次 OT</span>
<span class="line">- KKRT：只需要约 10,000 次 OT</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="ot-的数学原理-简化版" tabindex="-1"><a class="header-anchor" href="#ot-的数学原理-简化版"><span>OT 的数学原理（简化版）</span></a></h3><p><strong>基于 RSA 的 OT</strong>：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">发送方有两个消息：m₀ 和 m₁</span>
<span class="line">接收方想要 mᵦ（b 是 0 或 1）</span>
<span class="line"></span>
<span class="line">步骤1：发送方生成 RSA 密钥对</span>
<span class="line">    公钥：(N, e)</span>
<span class="line">    私钥：d</span>
<span class="line"></span>
<span class="line">步骤2：发送方生成两个随机数</span>
<span class="line">    x₀, x₁</span>
<span class="line"></span>
<span class="line">步骤3：接收方选择 b，生成随机数 k</span>
<span class="line">    如果 b=0：v = (x₀ + k^e) mod N</span>
<span class="line">    如果 b=1：v = (x₁ + k^e) mod N</span>
<span class="line">    </span>
<span class="line">步骤4：发送方计算</span>
<span class="line">    k₀ = (v - x₀)^d mod N</span>
<span class="line">    k₁ = (v - x₁)^d mod N</span>
<span class="line">    </span>
<span class="line">    如果接收方选了 b=0：k₀ = k（正确）</span>
<span class="line">    如果接收方选了 b=1：k₁ = k（正确）</span>
<span class="line"></span>
<span class="line">步骤5：发送方加密消息</span>
<span class="line">    发送 m₀ + k₀ 和 m₁ + k₁</span>
<span class="line"></span>
<span class="line">步骤6：接收方只能解密正确的</span>
<span class="line">    如果 b=0：(m₀ + k₀) - k = m₀ ✅</span>
<span class="line">    如果 b=1：(m₁ + k₁) - k = m₁ ✅</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>加盐（Salt）和随机化详解</summary><h3 id="什么是加盐" tabindex="-1"><a class="header-anchor" href="#什么是加盐"><span>什么是加盐？</span></a></h3><p><strong>简化版（不安全）</strong>：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token builtin">hash</span> <span class="token operator">=</span> SHA256<span class="token punctuation">(</span><span class="token string">&quot;1001&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 问题：每次结果都一样</span></span>
<span class="line"><span class="token comment"># &quot;1001&quot; 永远是 &quot;8d969eef...&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>加盐版（安全）</strong>：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line">salt <span class="token operator">=</span> random_bytes<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>  <span class="token comment"># 随机生成</span></span>
<span class="line"><span class="token builtin">hash</span> <span class="token operator">=</span> SHA256<span class="token punctuation">(</span><span class="token string">&quot;1001&quot;</span> <span class="token operator">+</span> salt<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 每次结果都不同</span></span>
<span class="line"><span class="token comment"># 第1次：&quot;a3f7c2e9...&quot;</span></span>
<span class="line"><span class="token comment"># 第2次：&quot;b9d4e1f6...&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="为什么需要加盐" tabindex="-1"><a class="header-anchor" href="#为什么需要加盐"><span>为什么需要加盐？</span></a></h3><h4 id="防止彩虹表攻击" tabindex="-1"><a class="header-anchor" href="#防止彩虹表攻击"><span>防止彩虹表攻击</span></a></h4><p><strong>彩虹表</strong>：预先计算的哈希表</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">没有加盐的情况：</span>
<span class="line">攻击者预先计算：</span>
<span class="line">1000 → &quot;8a7f3c2e...&quot;</span>
<span class="line">1001 → &quot;8d969eef...&quot;</span>
<span class="line">1002 → &quot;ad57366e...&quot;</span>
<span class="line">...</span>
<span class="line">9999 → &quot;f4e9d7c5...&quot;</span>
<span class="line"></span>
<span class="line">然后直接查表破解 ❌</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>加盐后</strong>：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">每次盐都不同，攻击者无法预先计算</span>
<span class="line">1001 + salt1 → &quot;a3f7c2e9...&quot;</span>
<span class="line">1001 + salt2 → &quot;b9d4e1f6...&quot;</span>
<span class="line"></span>
<span class="line">彩虹表失效 ✅</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="在-psi-中的加盐" tabindex="-1"><a class="header-anchor" href="#在-psi-中的加盐"><span>在 PSI 中的加盐</span></a></h3><p><strong>双重加盐</strong>：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token comment"># SecretFlow PSI 的实际做法</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 步骤1：参与方 A 生成随机盐</span></span>
<span class="line">salt_a <span class="token operator">=</span> random_bytes<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 步骤2：加盐哈希</span></span>
<span class="line">data <span class="token operator">=</span> <span class="token number">1001</span></span>
<span class="line">hashed <span class="token operator">=</span> SHA256<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">+</span> salt_a<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 步骤3：椭圆曲线加密</span></span>
<span class="line">encrypted <span class="token operator">=</span> privatekey_a × Hash_to_Point<span class="token punctuation">(</span>hashed<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 步骤4：参与方 B 再加盐再加密</span></span>
<span class="line">salt_b <span class="token operator">=</span> random_bytes<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span></span>
<span class="line">hashed2 <span class="token operator">=</span> SHA256<span class="token punctuation">(</span>encrypted <span class="token operator">+</span> salt_b<span class="token punctuation">)</span></span>
<span class="line">encrypted2 <span class="token operator">=</span> privatekey_b × Hash_to_Point<span class="token punctuation">(</span>hashed2<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>多层保护</strong>：</p><ol><li>✅ 盐保护原始数据</li><li>✅ 椭圆曲线加密保护哈希</li><li>✅ 双方都不知道对方的盐和私钥</li></ol><hr><h3 id="随机化-randomization" tabindex="-1"><a class="header-anchor" href="#随机化-randomization"><span>随机化（Randomization）</span></a></h3><p><strong>目的</strong>：隐藏数据集大小和分布</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token comment"># 真实数据集</span></span>
<span class="line">real_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token number">1002</span><span class="token punctuation">,</span> <span class="token number">1003</span><span class="token punctuation">]</span>  <span class="token comment"># 3个</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 添加虚假数据（padding）</span></span>
<span class="line">noise_data <span class="token operator">=</span> <span class="token punctuation">[</span>random_id<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line">padded_data <span class="token operator">=</span> real_data <span class="token operator">+</span> noise_data</span>
<span class="line"><span class="token comment"># [1001, 1002, 1003, 8374, 2918, 5647, ...]  # 3-13个</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 随机排序</span></span>
<span class="line">shuffled <span class="token operator">=</span> shuffle<span class="token punctuation">(</span>padded_data<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>好处</strong>：</p><ul><li>✅ 攻击者不知道真实数据集有多大</li><li>✅ 无法通过统计分析推断</li></ul></details><details class="hint-container details"><summary>完整的 PSI 流程（所有技术结合）</summary><h3 id="真正的-secretflow-ecdh-psi" tabindex="-1"><a class="header-anchor" href="#真正的-secretflow-ecdh-psi"><span>真正的 SecretFlow ECDH-PSI</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">参与方 A                                参与方 B</span>
<span class="line">  |                                      |</span>
<span class="line">  | 1. 生成私钥 a                        | 1. 生成私钥 b</span>
<span class="line">  |    salt_a                            |    salt_b</span>
<span class="line">  |                                      |</span>
<span class="line">  | 2. 加盐哈希                          | 2. 加盐哈希</span>
<span class="line">  |    h_a = SHA256(data + salt_a)      |    h_b = SHA256(data + salt_b)</span>
<span class="line">  |                                      |</span>
<span class="line">  | 3. 椭圆曲线加密                      | 3. 椭圆曲线加密</span>
<span class="line">  |    E_a = a × Hash_to_Point(h_a)     |    E_b = b × Hash_to_Point(h_b)</span>
<span class="line">  |                                      |</span>
<span class="line">  | 4. 添加随机噪声                      | 4. 添加随机噪声</span>
<span class="line">  |    E_a&#39; = E_a + random_points       |    E_b&#39; = E_b + random_points</span>
<span class="line">  |                                      |</span>
<span class="line">  | 5. 发送 E_a&#39; ──────────────────────→ |</span>
<span class="line">  |                                      | 6. 用 b 再加密</span>
<span class="line">  |                                      |    E_ab = b × E_a&#39;</span>
<span class="line">  | ←────────────────────── 发送 E_ab   |</span>
<span class="line">  |                                      |</span>
<span class="line">  | 7. 发送 E_b&#39; ───────────────────────→|</span>
<span class="line">  |                                      | 8. 用 a 再加密  </span>
<span class="line">  | 9. 用 a 再加密                       |    E_ba = a × E_b&#39;</span>
<span class="line">  |    E_ab = a × E_b&#39;                   |</span>
<span class="line">  |                                      |</span>
<span class="line">  | 10. 比较 E_ab 和 E_ba               | 10. 比较 E_ab 和 E_ba</span>
<span class="line">  |     相同 → 交集                      |     相同 → 交集</span>
<span class="line">  |                                      |</span>
<span class="line">  | 11. 使用 OT 协议确认                 | 11. OT 验证</span>
<span class="line">  |     （双方不知道对方查了什么）       |</span>
<span class="line">  |                                      |</span>
<span class="line">  | 12. 输出交集                         | 12. 输出交集</span>
<span class="line">  |     [1002, 1003]                     |     [1002, 1003]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安全性对比" tabindex="-1"><a class="header-anchor" href="#安全性对比"><span>安全性对比</span></a></h3><p><strong>简化版 vs 真正的 SecretFlow</strong></p><table><thead><tr><th>攻击方式</th><th>简化版</th><th>SecretFlow PSI</th></tr></thead><tbody><tr><td><strong>暴力破解</strong></td><td>❌ 可以</td><td>✅ 不可以（椭圆曲线）</td></tr><tr><td><strong>彩虹表</strong></td><td>❌ 可以</td><td>✅ 不可以（加盐）</td></tr><tr><td><strong>推断数据量</strong></td><td>❌ 可以</td><td>✅ 不可以（随机化）</td></tr><tr><td><strong>监听网络</strong></td><td>❌ 可以推断</td><td>✅ 只看到加密数据</td></tr><tr><td><strong>推断查询内容</strong></td><td>❌ 可以</td><td>✅ 不可以（OT）</td></tr></tbody></table><h3 id="技术组合的威力" tabindex="-1"><a class="header-anchor" href="#技术组合的威力"><span>技术组合的威力</span></a></h3><p><strong>每个技术防御一类攻击</strong>：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">椭圆曲线加密</span>
<span class="line">    ↓ 防止：暴力破解原始数据</span>
<span class="line">    </span>
<span class="line">加盐</span>
<span class="line">    ↓ 防止：彩虹表攻击</span>
<span class="line">    </span>
<span class="line">随机化</span>
<span class="line">    ↓ 防止：统计分析攻击</span>
<span class="line">    </span>
<span class="line">OT 协议</span>
<span class="line">    ↓ 防止：推断查询内容</span>
<span class="line">    </span>
<span class="line">多层组合</span>
<span class="line">    ↓ 结果：无法攻破 ✅</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="性能对比" tabindex="-1"><a class="header-anchor" href="#性能对比"><span>性能对比</span></a></h3><p><strong>计算复杂度</strong></p><table><thead><tr><th>操作</th><th>简化版</th><th>SecretFlow PSI</th></tr></thead><tbody><tr><td><strong>加密</strong></td><td>O(n)</td><td>O(n log n)</td></tr><tr><td><strong>通信</strong></td><td>O(n)</td><td>O(n)</td></tr><tr><td><strong>内存</strong></td><td>O(n)</td><td>O(n)</td></tr></tbody></table><p><strong>示例</strong>（10,000 条数据）：</p><ul><li>简化版：0.1 秒</li><li>SecretFlow：5-10 秒</li></ul><p><strong>但 SecretFlow 换来了</strong>：</p><ul><li>✅ 密码学级别的安全保证</li><li>✅ 可以用于真实生产环境</li></ul></details><details class="hint-container details"><summary>深入学习资源</summary><p><strong>椭圆曲线密码学</strong>：</p><ul><li>📖 书籍：《深入浅出密码学》</li><li>🎓 课程：Coursera - Cryptography I</li></ul><p><strong>OT 协议</strong>：</p><ul><li>📄 论文：Ishai et al. &quot;Extending Oblivious Transfers Efficiently&quot;</li><li>🔗 博客：https://bristolcrypto.blogspot.com/2016/10/what-is-oblivious-transfer.html</li></ul><p><strong>SecretFlow 实现</strong>：</p><ul><li>📚 官方文档：https://www.secretflow.org.cn</li><li>💻 源代码：https://github.com/secretflow/secretflow</li></ul><h3 id="三大技术的作用" tabindex="-1"><a class="header-anchor" href="#三大技术的作用"><span>三大技术的作用</span></a></h3><table><thead><tr><th>技术</th><th>作用</th><th>类比</th></tr></thead><tbody><tr><td><strong>椭圆曲线</strong></td><td>无法破解的加密</td><td>保险箱</td></tr><tr><td><strong>OT 协议</strong></td><td>隐藏查询意图</td><td>匿名信箱</td></tr><tr><td><strong>加盐随机化</strong></td><td>防止统计分析</td><td>烟雾弹</td></tr></tbody></table></details><h3 id="相关资源" tabindex="-1"><a class="header-anchor" href="#相关资源"><span>相关资源</span></a></h3><ul><li><a href="https://www.secretflow.org.cn/" target="_blank" rel="noopener noreferrer">隐语官方文档</a></li><li><a href="https://github.com/secretflow/secretflow" target="_blank" rel="noopener noreferrer">GitHub 仓库</a></li><li><a href="https://github.com/secretflow/awesome-psi" target="_blank" rel="noopener noreferrer">PSI 论文合集</a></li><li><a href="https://www.bilibili.com/video/BV1xx4y1Q7zF/" target="_blank" rel="noopener noreferrer">视频教程</a></li></ul><hr><blockquote><p><strong>提示</strong>：想要实际应用 PSI 技术？可以下载隐语 SDK，几行代码就能实现！</p></blockquote>`,10)])])}const w=m(f,[["render",y]]),S=JSON.parse('{"path":"/tech/","title":"PSI","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1761804400000,"contributors":[{"name":"tailunyu","username":"tailunyu","email":"tailunyu@example.com","commits":13,"url":"https://github.com/tailunyu"}],"changelog":[{"hash":"2ebce0e0e146135423c8c75d6354479e008cb2be","time":1761804400000,"email":"tailunyu@example.com","author":"tailunyu","message":"清理冗余文件+合并密码学详解到主文档：完整ECC/OT/加盐/流程/性能对比"},{"hash":"b881d72a61c74c287b4af87c44fd50322fb4df1e","time":1761802514000,"email":"tailunyu@example.com","author":"tailunyu","message":"简化标题和导航：标题改为PSI，删除侧边栏，简化首页"},{"hash":"10e27ddf160fcebaa58c10d3bc1e50f6c3f04499","time":1761796091000,"email":"tailunyu@example.com","author":"tailunyu","message":"整合页面：删除项目介绍，合并场景到PSI，简化导航为单一入口"},{"hash":"ae2c1e01d709b9f2d3cd51924aaa6d0515a4ca4d","time":1761756525000,"email":"tailunyu@example.com","author":"tailunyu","message":"精简图标，提升专业性；场景痛点更抽象；统一使用参与方概念"},{"hash":"4b3d99c8c26e28d71a82f2c667202eec2f0bfc95","time":1761754777000,"email":"tailunyu@example.com","author":"tailunyu","message":"优化显示效果：增大字体、提高对比度、改善哈希显示"},{"hash":"6d637acb9ed9f630ca42f26a2a3419aecd4d6fa9","time":1761754428000,"email":"tailunyu@example.com","author":"tailunyu","message":"修复交互按钮：将runPSI挂载到全局window对象"},{"hash":"0a8113744f1ee9cdc2d13474cdd34484765b3d9d","time":1761753818000,"email":"tailunyu@example.com","author":"tailunyu","message":"修复：移除ClientOnly标签，改用原始HTML确保交互正常"},{"hash":"75082aeccad7a6065be12e0c234a49353ab076ec","time":1761753515000,"email":"tailunyu@example.com","author":"tailunyu","message":"修复：交互按钮移入ClientOnly + 优化Colab卡片呈现"},{"hash":"9b4c0cc7175d87cb4f55259d381969187fed2d7f","time":1761753133000,"email":"tailunyu@example.com","author":"tailunyu","message":"修复：解决HTML显示问题 - 使用ClientOnly包裹交互演示"},{"hash":"0a6a961a8cf1d06b3a95217f22c87701b2a8a98c","time":1761752422000,"email":"tailunyu@example.com","author":"tailunyu","message":"✅ 完成 Day1 &#x26; Day2：更新Colab真实链接并部署"},{"hash":"a12649adee3b5c9bfdc9ba99c19503307c8acd23","time":1761751323000,"email":"tailunyu@example.com","author":"tailunyu","message":"修复：JavaScript代码服务端渲染兼容性"},{"hash":"e3d283e0b8f9a82e1a7bfa6fa531f83210338450","time":1761751251000,"email":"tailunyu@example.com","author":"tailunyu","message":"✨ 添加交互式PSI演示：JavaScript网页版 + Colab完整代码"},{"hash":"8e6f257fc21dca7260a98c510770b7e7b48cd667","time":1761745547000,"email":"tailunyu@example.com","author":"tailunyu","message":"初始提交：隐语交互式拆解站"}]},"filePathRelative":"tech/README.md"}');export{w as comp,S as data};
